from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, Bot
)
from telegram.ext import (
    CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler, CallbackQueryHandler
)
from bot.db import SessionLocal
from bot.models import Complaint
from bot.pdf_generator import generate_pdf
from bot.config import ADMINS, BOT_TOKEN, NOTIFY_CHAT_ID
from bot.handlers.admin_auth import auth_panel

CHOICE_TYPE, FIO, TEL, COMMENT = range(4)

# /start ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_btn = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup = ReplyKeyboardMarkup([[contact_btn]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact and contact.phone_number:
        context.user_data["tel"] = contact.phone_number
        # –ú–µ–Ω—é
        keyboard = [
            ["üì® –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üÜî –ú–æ–π ID"],
            ["üîê –ê–¥–º–∏–Ω–∫–∞"] if str(update.effective_user.id) in ADMINS else []
        ]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–Ω–æ–ø–∫–∏ ‚Üí –ö–æ–º–∞–Ω–¥—ã
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì® –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É":
        return await report(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "üÜî –ú–æ–π ID":
        return await get_id(update, context)
    elif text == "üîê –ê–¥–º–∏–Ω–∫–∞":
        return await auth_panel(update, context)

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã –º–æ–∂–µ—Ç–µ:\nüì® –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É\nüÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\nüîê –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
    )

# /report ‚Üí –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data="anon")],
        [InlineKeyboardButton("üë§ –ü—É–±–ª–∏—á–Ω–æ", callback_data="public")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É?", reply_markup=markup)
    return CHOICE_TYPE

# –í—ã–±–æ—Ä –∞–Ω–æ–Ω–∏–º/–ø—É–±–ª–∏—á–Ω–æ
async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã –ø—Ä–∏–Ω—è—Ç")
    query = update.callback_query
    await query.answer()

    context.user_data["type"] = "–ê–Ω–æ–Ω–∏–º–Ω–∞—è" if query.data == "anon" else "–ü—É–±–ª–∏—á–Ω–∞—è"

    if query.data == "anon":
        context.user_data["fio"] = "–ê–Ω–æ–Ω–∏–º"
        context.user_data["tel"] = "–°–∫—Ä—ã—Ç"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
        return COMMENT
    else:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return FIO

# –§–ò–û
async def fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return TEL

# –¢–µ–ª–µ—Ñ–æ–Ω
async def tel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tel"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    return COMMENT

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text
    await update.message.reply_text("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –≤–≤–µ–¥–∏—Ç–µ /accept")
    return ConversationHandler.END

# /accept
async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    fio = context.user_data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    tel = context.user_data.get("tel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    comment = context.user_data.get("comment", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    complaint_type = context.user_data.get("type", "–ü—É–±–ª–∏—á–Ω–∞—è")

    session = SessionLocal()
    complaint = Complaint(
        user_id=user_id,
        full_name=fio,
        phone=tel,
        comment=comment,
        complaint_type=complaint_type
    )
    session.add(complaint)
    session.commit()
    session.close()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_file = generate_pdf(fio, tel, comment, complaint_type)
    pdf_file = pdf_file.lstrip("./")
    pdf_url = f"https://mdmgasn.uz/{pdf_file}"

    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    bot = Bot(BOT_TOKEN)
    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=(
            f"üì¨ *–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!*\n\n"
            f"*–¢–∏–ø:* {complaint_type}\n"
            f"*–§–ò–û:* {fio}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {tel}\n"
            f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n"
            f"[üìé PDF]({pdf_url})"
        ),
        parse_mode="Markdown"
    )

    await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!")

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# /id
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("report", report)],
        states={
            CHOICE_TYPE: [CallbackQueryHandler(choose_type)],
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fio)],
            TEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, tel)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("accept", accept))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(CommandHandler("adminpanel", auth_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(conv_handler)

# from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Bot
# from telegram.ext import (
#     CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
# )
# from bot.db import SessionLocal
# from bot.models import Complaint
# from bot.pdf_generator import generate_pdf
# from bot.config import ADMINS, BOT_TOKEN, NOTIFY_CHAT_ID
# from bot.handlers.admin_auth import auth_panel  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
#
# FIO, TEL, COMMENT = range(3)
#
#
# # /start
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report.")
#
#
# # /help
# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(
#         "–ö–æ–º–∞–Ω–¥—ã:\n/report - –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É\n/FIO - –§–ò–û\n/tel - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n/comment - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n/accept - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
#     )
#
#
# # /report
# async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
#     return FIO
#
#
# # –§–ò–û
# async def fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data["fio"] = update.message.text
#     await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
#     return TEL
#
#
# # –¢–µ–ª–µ—Ñ–æ–Ω
# async def tel(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data["tel"] = update.message.text
#     await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
#     return COMMENT
#
#
# # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
# async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data["comment"] = update.message.text
#     await update.message.reply_text("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –≤–≤–µ–¥–∏—Ç–µ /accept")
#     return ConversationHandler.END
#
#
# # /accept
# async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     fio = context.user_data.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#     tel = context.user_data.get("tel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#     comment = context.user_data.get("comment", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#
#     session = SessionLocal()
#     complaint = Complaint(
#         user_id=user_id,
#         full_name=fio,
#         phone=tel,
#         comment=comment
#     )
#     session.add(complaint)
#     session.commit()
#     session.close()
#
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
#     # pdf_file = generate_pdf(fio, tel, comment)
#     # pdf_url = f"https://mdmgasn.uz/{pdf_file}"
#
#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É
#     # bot = Bot(BOT_TOKEN)
#     # await bot.send_message(
#     #    chat_id=NOTIFY_CHAT_ID,
#     #    text=(
#     #        f"<b>üì¨ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!</b>\n\n"
#     #        f"<b>–§–ò–û:</b> {fio}\n"
#     #        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {tel}\n"
#     #        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
#     #        f"<a href='{pdf_url}'>üìé –û—Ç–∫—Ä—ã—Ç—å PDF</a>"
#     #    ),
#     #    parse_mode="HTML"
#     # )
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
#     pdf_file = generate_pdf(fio, tel, comment)
#
#     # –û—á–∏—Å—Ç–∏–º –ø—É—Ç—å –æ—Ç "./"
#     pdf_file = pdf_file.lstrip("./")
#
#     # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
#     pdf_url = f"https://mdmgasn.uz/{pdf_file}"
#
#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É
#     bot = Bot(BOT_TOKEN)
#     await bot.send_message(
#         chat_id=NOTIFY_CHAT_ID,
#         text=(
#             f"üì¨ *–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!*\n\n"
#             f"*–§–ò–û:* {fio}\n"
#             f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {tel}\n"
#             f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n"
#             f"[üìé –û—Ç–∫—Ä—ã—Ç—å PDF]({pdf_url})"
#         ),
#         parse_mode="Markdown"
#     )
#
#     await update.message.reply_text(f"PDF —Å –∂–∞–ª–æ–±–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {pdf_file}")
#     await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!")
#
#
# # –û—Ç–º–µ–Ω–∞
# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
#     return ConversationHandler.END
#
#
# # –ù–∞–π—Ç–∏ Telegram ID
# # async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {update.effective_user.id}")
#
#
# # /id ‚Äî –≤—ã–¥–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
# async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id
#     chat_id = update.effective_chat.id
#     await update.message.reply_text(
#         f"üë§ –í–∞—à Telegram ID: `{user_id}`\nüí¨ Chat ID: `{chat_id}`",
#         parse_mode="Markdown"
#     )
#
#
# def setup_handlers(app):
#     conv_handler = ConversationHandler(
#         entry_points=[CommandHandler("report", report)],
#         states={
#             FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fio)],
#             TEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, tel)],
#             COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
#         },
#         fallbacks=[CommandHandler("cancel", cancel)]
#     )
#
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("help", help_command))
#     app.add_handler(CommandHandler("accept", accept))
#     app.add_handler(CommandHandler("id", get_id))
#     app.add_handler(CommandHandler("adminpanel", auth_panel))  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
#     app.add_handler(conv_handler)
